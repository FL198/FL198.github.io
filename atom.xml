<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>波妞妞的博客</title>
  
  <subtitle>Ann</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fl198.github.io/"/>
  <updated>2020-05-12T06:50:36.802Z</updated>
  <id>http://fl198.github.io/</id>
  
  <author>
    <name>Fan Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git操作说明</title>
    <link href="http://fl198.github.io/2018/08/15/git%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/"/>
    <id>http://fl198.github.io/2018/08/15/git%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/</id>
    <published>2018-08-15T06:05:16.000Z</published>
    <updated>2020-05-12T06:50:36.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-工作区、暂存区和本地仓库"><a href="#1-工作区、暂存区和本地仓库" class="headerlink" title="1. 工作区、暂存区和本地仓库"></a>1. 工作区、暂存区和本地仓库</h1><ol><li><p>工作区：放源代码的地方</p></li><li><p>暂存区：使用git add命令以后，会将工作区中的修改文件提交到暂存区（可以通过git status命令查看是否有被修改的文件还未存放到暂存区中）。</p></li><li><p>本地仓库：使用git commit -m “xxx”命令以后，会将暂存区中的内容提交到仓库。此时会清空暂存区。</p></li></ol><h1 id="2-相关操作"><a href="#2-相关操作" class="headerlink" title="2. 相关操作"></a>2. 相关操作</h1><h2 id="2-1-常用操作"><a href="#2-1-常用操作" class="headerlink" title="2.1 常用操作"></a>2.1 常用操作</h2><ol><li>在文件夹中初始化仓库：git init</li><li>查看是否有文件未被Untracked（比如文件被再次修改后）：git status</li><li>将工作区的文件提交到暂存区：使用 git add * （提交所有文件）或者 使用 git add a.js （提交a.js文件）</li><li>将暂存区文件提交到仓库中：git commit -m “创建了xxx文件”</li><li>查看当前版本和之前版本的区别：git diff a.js</li></ol><h2 id="2-2-git版本的回撤"><a href="#2-2-git版本的回撤" class="headerlink" title="2.2 git版本的回撤"></a>2.2 git版本的回撤</h2><ol><li><p>查看历史版本的信息：git log</p></li><li><p>格式化历史版本信息：git log –pretty=oneline</p></li><li><p>回退到上一版本：git reset –hard HEAD^</p><p>// HEAD 默认最新版本</p><p>// HEAD^ 为上一版本</p><p>// HEAD^^ 为上上版本</p><p>// HEAD~100 为前100个版本</p></li><li><p>当回退版本以后，我们用git log是看不到最新版本的，此时我们可以用：git reflog 查看所有版本。</p></li><li><p>根据版本号可以回退到指定的版本：git reset –hard b236</p></li></ol><h1 id="3-撤销修改"><a href="#3-撤销修改" class="headerlink" title="3. 撤销修改"></a>3. 撤销修改</h1><h2 id="3-1-撤销工作区的修改"><a href="#3-1-撤销工作区的修改" class="headerlink" title="3.1 撤销工作区的修改"></a>3.1 撤销工作区的修改</h2><ol><li><p>如果我们修改了工作区上的代码并且还未提交到暂存区上时，我们先要把工作区里的代码回撤到版本库的状态：git checkout – a.js</p></li><li><p>如果我们修改了工作区上的代码并且提交到了暂存区中，但没有提交到master分支上，此时继续修改工作区中的代码，会回撤到暂存区的状态：git checkout – a.js</p></li></ol><h2 id="3-2-撤销暂存区的修改"><a href="#3-2-撤销暂存区的修改" class="headerlink" title="3.2 撤销暂存区的修改"></a>3.2 撤销暂存区的修改</h2><p>git reset 既可以退版本，也可以将暂存区的修改回退到工作区：git reset HEAD a.js</p><ul><li>git reset –hard HEAD^</li></ul><p>​       三者的改变全都丢失，即代码的修改内容丢失</p><ul><li>git reset –soft HEAD^</li></ul><p>​       回退到git commit之前，此时处在暂存区。（即执行git add 命令后）</p><ul><li>git reset –mixed HEAD^</li></ul><p>​       就等于 git reset HEAD 回退到工作区，即git add 之前</p><h1 id="4-删除操作"><a href="#4-删除操作" class="headerlink" title="4. 删除操作"></a>4. 删除操作</h1><ol><li><p>删除a.js文件：git rm a.js</p></li><li><p>删除后未提交到仓库，可以通过checkout来找回删除文件：git checkout – a.js</p></li></ol><h1 id="5-分支命令"><a href="#5-分支命令" class="headerlink" title="5. 分支命令"></a>5. 分支命令</h1><ol><li><p>新建并切换分支：git checkout -b dev</p></li><li><p>查看所有分支：git branch</p></li><li><p>切换到xxx分支：git checkout xxx（如master、dev等）</p></li><li><p>合并分支：</p><p>​    a. 首先先切换到当前分支（如主分支）：git checkout master</p><p>​    b. 再将其他分支（如dev分支）合并到此分支上：git merge dev</p></li><li><p>删除分支：git branch -d dev</p></li></ol><h1 id="6-仓库信息的抓取和推送"><a href="#6-仓库信息的抓取和推送" class="headerlink" title="6. 仓库信息的抓取和推送"></a>6. 仓库信息的抓取和推送</h1><ol><li><p>通过git clone来克隆服务器的仓库，默认情况下克隆的是主分支</p></li><li><p>从服务器抓取最新代码：git pull</p></li><li><p>向远程服务器推送代码：git push -u origin master（推送origin仓库的主分支）或者 git push origin dev（推送dev分支）</p></li></ol><h1 id="7-分支合并的冲突问题"><a href="#7-分支合并的冲突问题" class="headerlink" title="7. 分支合并的冲突问题"></a>7. 分支合并的冲突问题</h1><p>当修改同一个文件相同的代码时（如A分支与B分支修改同一个文件），提交修改进行合并时会出现冲突问题，此时可以将文件中的&lt;&lt;&lt;&lt;====&gt;&gt;&gt;&gt;做出相应的删除。</p><p>解决方案：最好不要去修改同一个文件</p><h1 id="8-多人协作开发遵循的原则"><a href="#8-多人协作开发遵循的原则" class="headerlink" title="8. 多人协作开发遵循的原则"></a>8. 多人协作开发遵循的原则</h1><ol><li><p>先pull后push</p></li><li><p>每一次push之间，最好先pull拉取最新代码</p></li><li><p>git pull时可能会发生冲突问题，先解决冲突，再push代码</p></li><li><p>一般每完成一个功能块，push一次</p></li></ol><h1 id="9-配置git可忽略文件"><a href="#9-配置git可忽略文件" class="headerlink" title="9. 配置git可忽略文件"></a>9. 配置git可忽略文件</h1><ol><li><p>在项目根目录下创建.gitignore文件</p></li><li><p>在文件中输入：</p></li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">dist&#x2F;</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><ol start="3"><li><p>git add .gitignore</p></li><li><p>git commit -m “gitignore”</p></li><li><p>git pull</p></li><li><p>git push</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-工作区、暂存区和本地仓库&quot;&gt;&lt;a href=&quot;#1-工作区、暂存区和本地仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 工作区、暂存区和本地仓库&quot;&gt;&lt;/a&gt;1. 工作区、暂存区和本地仓库&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工作区：放源代码的地方
      
    
    </summary>
    
    
      <category term="工具" scheme="http://FL198.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://FL198.github.io/tags/git/"/>
    
  </entry>
  
</feed>
